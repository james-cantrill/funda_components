programs_manager Definition

	programs_manager
		Definition: 
			The programs_manager is a microservice exposing the actions (functions) needed to manage the programs, agencies, and continua used in the system's reports. These entities will be imported from the HMIS system being reported on. This component will provide all the actions needed to control the visibility of the continua, agencies, and programs to each system user.
		Entities managed: 
			continuum, 
			agency
			program
			
programs_manager architecture

	the programs_manager_manager microservice will be implemented as postgresql functions in the programs_manager schema of the application's database.
		each function will define an action
			the action function presents the action to the programs_manager model which then completes it if it's appropriate to the programs_manager's state and allowed by the business logic. The state comparison is done inside the function, and all business logic is carried out by the action function or other functions it calls
			
	The action functions will be exposed only through the programs_manager_api, an API which will  be implemented in a nodejs application. The API can be used by an user agent or other microservices to call the action functions. The programs_manager_api will use the Seneca microservices toolkit and the API will defined as Seneca json paterns			

	Actions exposed:
			list_user_visible_programs
			list_user_visible_organizations
			available only to administrators:
				change_program_user_visibility
				change_organization_user_visibility
				enter_edit_program_folders
				enter_edit_programs
		Depencencies:
			programs_manager_manager
		Schema Name:
			programs_manager_schema

	Action patterns
	
		change_program_user_visibility patterns
		
			input pattern
			{
				micro_service:	programs_manager,
				action:	change_program_user_visibility,
				user_data:	{
								login:
								service:
								program:
								task:	//visible (set programs_manager_schema.programs_manager_allowed_programs.program_accessible to TRUE) or not_visible (set programs_manager_schema.programs_manager_allowed_programs.program_accessible to FALSE)
								changing_user_login:
							}
			};
			
			output json
			{
				result_indicator:
				message:
				login:
				service:
				program_id:
				program_name:
				visible:
				changing_user_login:
			}		
						
		list_user_visible_programs patterns
		
			input pattern
			{
				micro_service:	programs_manager,
				action:	list_user_visible_programs,
				user_data:	{
								login:
							}
			};
			
			output json
				{
				result_indicator:
				message:
				login:
				reports: [
						{
							program_id:
							program_name:
						}
					]
			}								
			
		change_organization_user_visibility patterns
		
			input pattern
			{
				micro_service:	programs_manager,
				action:	change_organization_user_visibility,
				user_data:	{
								login:
								service:
								organization:
								task:	//visible (set programs_manager_schema.programs_manager_allowed_programs.program_accessible to TRUE) or not_visible (set programs_manager_schema.programs_manager_allowed_programs.program_accessible to FALSE)
								changing_user_login:
							}
			};
			
			output json
			{
				result_indicator:
				message:
				login:
				service:
				program_id:
				agency:
				visible:
				changing_user_login:
			}		

		list_user_visible_organizations patterns
		
			input pattern
			{
				micro_service:	programs_manager,
				action:	list_user_visible_organizations,
				user_data:	{
								login:
							}
			};
			
			output json
				{
				result_indicator:
				message:
				login:
				organizations: [
						{
							organization_id:
							organization_name:
						}
					]
			}								
			
			
